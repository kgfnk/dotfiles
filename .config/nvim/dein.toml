[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo   = 'Shougo/unite.vim'
depends = 'neomru.vim'

[[plugins]]
repo = 'Shougo/unite-outline'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
command! FZFMru call fzf#run({
      \  'source':  v:oldfiles,
      \  'sink':    'e',
      \  'options': '-m -x +s',
      \  'down':    '40%'})
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--exact --reverse --delimiter : --nth 3..'}, 'right:50%:wrap'))
imap <S-Tab> <Plug>(fzf-complete-line)
nnoremap <Leader><Space> :Files<CR>
nnoremap <Leader>B :Buffers<CR>
nnoremap <Leader>x :Commands<CR>
"nnoremap <Leader>f :GFiles<CR>
nnoremap <Leader>ff :<C-u>Files<CR>
nnoremap <Leader>fg :<C-u>GFiles<CR>
nnoremap <Leader>fG :<C-u>GFiles?<CR>
nnoremap <Leader>gr :<C-u>Rg <C-r>=expand('<cword>')<CR><CR>
vnoremap <Leader>gr :<C-u>Rg <C-r>=expand('<cword>')<CR><CR>
nnoremap <Leader>k :bd<CR>
"nnoremap <Leader>r :FZFMru<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
depends = ['tpope/vim-rhubarb']

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'shumphrey/fugitive-gitlab.vim'
hook_add = '''
let g:fugitive_gitlab_domains = ['https://gitlab.akashic-cloud']
let g:gitlab_api_keys = {'gitlab.akashic-cloud': 'hFx6Pa9NLkwaNoJdHaN1'}
'''

[[plugins]]
repo = 'gregsexton/gitv'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_highlight_lines = 0
let g:gitgutter_sign_added = ''
let g:gitgutter_sign_modified = ''
let g:gitgutter_sign_removed = '✂'
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]  #filetypeを変更
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim', 'vim-textobj-user']
hock_add = '''
nmap <Leader>q <Plug>(precious-quickrun-op)
omap ic <Plug>(textobj-precious-i)
vmap ic <Plug>(textobj-precious-i)
'''

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = '''
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_enable_auto_cd = 0
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = ' '
let g:vimfiler_readonly_file_icon = '✗'
let g:vimfiler_marked_file_icon = '✓'
'''

[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
let g:previm_open_cmd = ''
let g:previm_enable_realtime = 1
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {}
let g:quickrun_config._ = {
      \   "split": "vertical",
      \   "runner" : "vimproc",
      \   "runner/vimproc/updatetime" : 40
      \}
let g:quickrun_config.go= {
  \   'command': 'go run',
  \ }
'''

[[plugins]]
repo = 'vim-pandoc/vim-pandoc-after'
hook_add = '''
let g:pandoc#after#modules#enabled = ["nrrwrgn", "ultisnips", "unite.vim"]
'''

[[plugins]]
repo = 'lifepillar/vim-solarized8'
hook_add = '''
"set background=dark
"au MyAutoCmd VimEnter * nested colorscheme solarized8_dark
'''

[[plugins]]
repo = 'NLKNguyen/papercolor-theme'
hook_add = '''
set background=light
au MyAutoCmd VimEnter * nested colorscheme PaperColor
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
'''

[[plugins]]
repo = 'delphinus/lightline-delphinus'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
"let g:lightline = {
"      \ 'colorscheme': 'PaperColor',
"      \ 'active': {
"      \   'left': [ [ 'mode', 'paste' ],
"      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
"      \ },
"      \ 'component': {
"      \   'readonly': '%{&readonly?"×":""}',
"      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
"      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
"      \ },
"      \ }
'''

[[plugins]]   #日付のインクリメント
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
nmap <Leader>S ysiw
nmap <Leader>St ysst
nmap <Leader>ST ySSt
'''

#[[plugins]]
#repo = 'neomake/neomake'
#hook_add = '''
#autocmd! BufWritePost * Neomake
#let g:neomake_open_list = 2
#'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add= '''
let g:switch_mapping = ""
nnoremap - :Switch<CR>
nnoremap + :SwitchReverse<CR>
let g:switch_custom_definitions = [
      \   ['pick', 'reword', 'edit', 'squash', 'fixup', 'exec'],
      \   ['-', '+', '=', '*', '/'],
      \   ['{', '}', '[', ']', '(', ')', '<', '>'],
      \   ['!', '@', '#', '$', '%', '^', '&', '|'],
      \   ['foo', 'bar', 'baz'],
      \   ['hoge', 'fuga', 'piyo'],
      \   ['yes', 'no'],
      \   ['on', 'off'],
      \   ['And', 'Or'],
      \   ['and', 'or'],
      \   ['start', 'end'],
      \   ['○', '×', '△'],
      \   ['①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨', '⑩'],
      \   ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],
      \   ['日', '月', '火', '水', '木', '金', '土'],
      \   ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'],
      \   ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
      \ ]
'''

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'kgfnk/vim-csvtrans'


[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'lambdalisue/gina.vim'

[[plugins]]
repo = 'jason0x43/vim-js-indent'
hook_add = '''
let g:js_indent_typescript = 1
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

#[[plugins]]
#repo = 'Quramy/tsuquyomi'

[[plugins]]
repo = 'leafgarland/typescript-vim'
hook_add = '''
autocmd FileType typescript :set makeprg=tsc
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow
let g:typescript_indent_disable = 1
let g:typescript_opfirst='\%([<>=,?^%|*/&]\|\([-:+]\)\1\@!\|!=\|in\%(stanceof\)\=\>\)'
let g:typescript_compiler_binary = 'tsc'
let g:typescript_compiler_options = ''
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'lambdalisue/gina.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
let g:NERDTreeLimitedSyntax = 1
nnoremap <silent><C-e> :NERDTreeToggle<CR>
"vim-nerdtree-syntax-highlight
let s:rspec_red = 'FE405F'
let s:git_orange = 'F54D27'
let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files
let g:NERDTreePatternMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreePatternMatchHighlightColor['.*_spec\.rb$'] = s:rspec_red " sets the color for files ending with _spec.rb

" vim-devicons
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '

" dir-icons
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''
let g:DevIconsDefaultFolderOpenSymbol = ''
" file-icons
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['css'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['txt'] = ''
'''

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
hook_add = '''
autocmd BufReadPre *.html let b:javascript_lib_use_angularui = 1
'''

[[plugins]]
repo = 'curist/vim-angular-template'

[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'yarn install --frozen-lockfile'
merged = '0'
hook_add = '''
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>

'''

[[plugins]]
repo = 'antoinemadec/coc-fzf'
hook_add = '''
nnoremap <silent> <space>a  :<C-u>CocFzfList diagnostics<CR>
nnoremap <silent> <space>b  :<C-u>CocFzfList diagnostics --current-buf<CR>
nnoremap <silent> <space>c  :<C-u>CocFzfList commands<CR>
nnoremap <silent> <space>e  :<C-u>CocFzfList extensions<CR>
nnoremap <silent> <space>l  :<C-u>CocFzfList location<CR>
nnoremap <silent> <space>o  :<C-u>CocFzfList outline<CR>
nnoremap <silent> <space>s  :<C-u>CocFzfList symbols<CR>
nnoremap <silent> <space>S  :<C-u>CocFzfList services<CR>
nnoremap <silent> <space>p  :<C-u>CocFzfListResume<CR>
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
" coc-yank
nnoremap <silent> <space>y  :<C-u>CocFzfList yank<cr>
'''

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'Chiel92/vim-autoformat'
hook_add = '''
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
au MyAutoCmd BufWrite *.js,*.jsx :Autoformat
'''

[[plugins]]
repo='neomutt/neomutt.vim'

[[plugins]]
repo='cohama/lexima.vim'

[[plugins]]
repo = 'zxqfl/tabnine-vim'

[[plugins]]
repo = 'SirVer/ultisnips'

[[plugins]]
repo = 'posva/vim-vue'
